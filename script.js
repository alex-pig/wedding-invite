// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
function handleImageLoad() {
  const images = document.querySelectorAll('.couple-photo');
  images.forEach(img => {
    img.addEventListener('load', function() {
      // –§–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ, —Å–∫—Ä—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
      const placeholder = this.parentElement.querySelector('.photo-placeholder');
      if (placeholder) {
        placeholder.style.display = 'none';
      }
    });
    
    img.addEventListener('error', function() {
      // –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
      const placeholder = this.parentElement.querySelector('.photo-placeholder');
      if (placeholder) {
        placeholder.style.display = 'flex';
      }
      this.style.display = 'none';
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
function adjustFontSize() {
  const names = document.querySelectorAll('.groom-name, .bride-name');
  const container = document.querySelector('.names-container');
  
  if (!container) return;
  
  const containerWidth = container.offsetWidth - 20; // –£—á–∏—Ç—ã–≤–∞–µ–º padding
  
  names.forEach(name => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫ –±–∞–∑–æ–≤–æ–º—É
    name.style.fontSize = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
    while (name.scrollWidth > containerWidth && parseInt(getComputedStyle(name).fontSize) > 20) {
      const currentSize = parseInt(getComputedStyle(name).fontSize);
      name.style.fontSize = (currentSize - 5) + 'px';
    }
  });
}

// –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
function updateCountdown() {
  const weddingDate = new Date('2025-10-25T18:00:00');
  const now = new Date();
  const difference = weddingDate - now;

  if (difference > 0) {
    const weeks = Math.floor(difference / (1000 * 60 * 60 * 24 * 7));
    const days = Math.floor((difference % (1000 * 60 * 60 * 24 * 7)) / (1000 * 60 * 60 * 24));
    const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((difference % (1000 * 60)) / 1000);

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–π–º–µ—Ä–∞ –≤ hero —Å–µ–∫—Ü–∏–∏
    const heroWeeksElement = document.getElementById('hero-weeks');
    const heroDaysElement = document.getElementById('hero-days');
    const heroHoursElement = document.getElementById('hero-hours');
    const heroMinutesElement = document.getElementById('hero-minutes');
    
    if (heroWeeksElement) heroWeeksElement.textContent = weeks;
    if (heroDaysElement) heroDaysElement.textContent = days;
    if (heroHoursElement) heroHoursElement.textContent = hours;
    if (heroMinutesElement) heroMinutesElement.textContent = minutes;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
    const mainDaysElement = document.getElementById('main-days');
    const mainHoursElement = document.getElementById('main-hours');
    const mainMinutesElement = document.getElementById('main-minutes');
    const mainSecondsElement = document.getElementById('main-seconds');
    
    if (mainDaysElement) mainDaysElement.textContent = days;
    if (mainHoursElement) mainHoursElement.textContent = hours;
    if (mainMinutesElement) mainMinutesElement.textContent = minutes;
    if (mainSecondsElement) mainSecondsElement.textContent = seconds;
  } else {
    // –ï—Å–ª–∏ —Å–≤–∞–¥—å–±–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
    const heroCountdown = document.getElementById('hero-countdown');
    const mainCountdown = document.getElementById('main-countdown');
    
    if (heroCountdown) {
      heroCountdown.innerHTML = '<p style="font-size: 1.2rem; color: #000;">–°–µ–≥–æ–¥–Ω—è –Ω–∞—à –¥–µ–Ω—å! üéâ</p>';
    }
    if (mainCountdown) {
      mainCountdown.innerHTML = '<p style="font-size: 1.2rem; color: #000;">–°–µ–≥–æ–¥–Ω—è –Ω–∞—à –¥–µ–Ω—å! üéâ</p>';
    }
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(updateCountdown, 1000);
updateCountdown(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π —Å –¥–µ—Ç—å–º–∏
function handleChildrenFields() {
  document.addEventListener('change', function(e) {
    if (e.target.name && e.target.name.startsWith('hasChildren_')) {
      const form = e.target.closest('form');
      const childrenFields = form.querySelectorAll('.children-fields');
      
      if (e.target.value === '–¥–∞') {
        childrenFields.forEach(field => {
          field.style.display = 'block';
        });
      } else {
        childrenFields.forEach(field => {
          field.style.display = 'none';
          // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
          const inputs = field.querySelectorAll('input, textarea');
          inputs.forEach(input => input.value = '');
        });
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã –≥–æ—Å—Ç—è
function createGuestForm(index) {
  const isAdditionalGuest = index > 0;
  const attendanceGroup = isAdditionalGuest ? `
    <div class="form-group attendance-group">
      <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ</label>
      <div class="radio-group">
        <label class="radio-option">
          <input type="radio" name="willAttend_${index}" value="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É!" required checked>
          <span>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É!</span>
        </label>
      </div>
    </div>
  ` : `
    <div class="form-group attendance-group">
      <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ</label>
      <div class="radio-group">
        <label class="radio-option">
          <input type="radio" name="willAttend_${index}" value="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É!" required>
          <span>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É!</span>
        </label>
        <label class="radio-option">
          <input type="radio" name="willAttend_${index}" value="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É">
          <span>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É</span>
        </label>
      </div>
    </div>
  `;

  return `
    <form class="guest-form-single" data-form-index="${index}">
      <div class="form-group">
        <label for="name-${index}">–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</label>
        <input type="text" id="name-${index}" name="name_${index}" required>
      </div>

      ${attendanceGroup}

      <div class="form-group">
        <label>–ë—É–¥–µ—Ç –ª–∏ —Å –≤–∞–º–∏ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ —Ä–µ–±–µ–Ω–æ–∫?</label>
        <div class="radio-group">
          <label class="radio-option">
            <input type="radio" name="hasChildren_${index}" value="–¥–∞">
            <span>–î–∞</span>
          </label>
          <label class="radio-option">
            <input type="radio" name="hasChildren_${index}" value="–Ω–µ—Ç" checked>
            <span>–ù–µ—Ç</span>
          </label>
        </div>
      </div>

      <div class="form-group children-fields" style="display: none;">
        <label for="childrenCount-${index}">–°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π?</label>
        <input type="number" id="childrenCount-${index}" name="childrenCount_${index}" min="1" max="10">
      </div>

      <div class="form-group children-fields" style="display: none;">
        <label for="childrenAge-${index}">–ö–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞?</label>
        <textarea id="childrenAge-${index}" name="childrenAge_${index}" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 5 –ª–µ—Ç, 8 –ª–µ—Ç"></textarea>
      </div>

      <div class="form-group">
        <label for="allergies-${index}">–ï—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏?</label>
        <textarea id="allergies-${index}" name="allergies_${index}" placeholder="–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–∏–µ, —á—Ç–æ–±—ã –º—ã –ø–æ–∑–∞–±–æ—Ç–∏–ª–∏—Å—å –æ –≤–∞—Å."></textarea>
      </div>

      <div class="form-group">
        <label for="creative-${index}">–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏?</label>
        <textarea id="creative-${index}" name="creative_${index}" placeholder="–ï—Å–ª–∏ –¥–∞ —Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."></textarea>
      </div>

      <div class="form-group">
        <label>–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º</label>
        <div class="radio-group">
          <label class="radio-option">
            <input type="radio" name="drink_${index}" value="–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å">
            <span>–ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å</span>
          </label>
          <label class="radio-option">
            <input type="radio" name="drink_${index}" value="–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ">
            <span>–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ</span>
          </label>
          <label class="radio-option">
            <input type="radio" name="drink_${index}" value="–ë–µ–ª–æ–µ –≤–∏–Ω–æ">
            <span>–ë–µ–ª–æ–µ –≤–∏–Ω–æ</span>
          </label>
          <label class="radio-option">
            <input type="radio" name="drink_${index}" value="–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏">
            <span>–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏</span>
          </label>
        </div>
      </div>

      <div class="form-buttons">
        <button type="button" class="add-guest-btn">–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è</button>
      </div>
    </form>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
function updateSubmitButtonText() {
  const formsContainer = document.getElementById('forms-container');
  const forms = formsContainer.querySelectorAll('.guest-form-single');
  const submitBtn = document.querySelector('.submit-all-btn');
  
  if (forms.length === 1) {
    submitBtn.textContent = '–û–¢–ü–†–ê–í–ò–¢–¨';
  } else {
    submitBtn.textContent = '–û–¢–ü–†–ê–í–ò–¢–¨ –í–°–ï –ê–ù–ö–ï–¢–´';
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π
function handleAddGuest() {
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('add-guest-btn')) {
      const formsContainer = document.getElementById('forms-container');
      const currentForms = formsContainer.querySelectorAll('.guest-form-single');
      const newIndex = currentForms.length;
      
      const newFormHTML = createGuestForm(newIndex);
      formsContainer.insertAdjacentHTML('beforeend', newFormHTML);
      
      // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è" –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ–æ—Ä–º—ã
      const previousForm = currentForms[currentForms.length - 1];
      const previousAddBtn = previousForm.querySelector('.add-guest-btn');
      if (previousAddBtn) {
        previousAddBtn.remove();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
      updateSubmitButtonText();
    }
  });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function retryAsync(fn, maxAttempts = 10, delay = 500) {
  let lastError;
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      const result = await fn();
      if (result !== false && result !== undefined) return result;
    } catch (err) {
      lastError = err;
    }
    await new Promise(res => setTimeout(res, delay));
  }
  throw lastError || new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ä–º—ã
async function submitSingleForm(form) {
  const params = new URLSearchParams();
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–æ—Ä–º—ã
  const formIndex = form.getAttribute('data-form-index');
  
  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã
  const dataToSend = {};
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è, –¥–∞–∂–µ –ø—É—Å—Ç—ã–µ
  const allFields = ['name', 'willAttend', 'hasChildren', 'childrenCount', 'childrenAge', 'allergies', 'creative', 'drink'];
  
  allFields.forEach(field => {
    const fieldName = field === 'name' ? `name_${formIndex}` : `${field}_${formIndex}`;
    
    if (field === 'drink') {
      // –î–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é radio –∫–Ω–æ–ø–∫—É
      const selectedDrink = form.querySelector(`input[name="${fieldName}"]:checked`);
      const value = selectedDrink ? selectedDrink.value : '';
      params.append(field, value);
      dataToSend[field] = value;
    } else {
      const input = form.querySelector(`[name="${fieldName}"]`);
      const value = input ? (input.type === 'radio' ? (input.checked ? input.value : '') : input.value) : '';
      params.append(field, value);
      dataToSend[field] = value;
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
  const requiredFields = ['name'];
  const missingFields = requiredFields.filter(field => !dataToSend[field]);
  
  if (missingFields.length > 0) {
    throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ' + missingFields.join(', '));
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É
  const googleResponse = await retryAsync(() => fetch('https://script.google.com/macros/s/AKfycbzr_G1g10OMvbNQ5Xb3aizFUrCnxGwqpQ-boM8suhzWX4AHK0Yay5I5_-bhpsIvGuK5/exec', {
    method: 'POST',
    body: params
  }), 10, 1000);

  if (!googleResponse.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—É');
  }

  // –°–æ–∑–¥–∞–µ–º FormData —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã –¥–ª—è Telegram
  const formDataForTelegram = new FormData();
  allFields.forEach(field => {
    const fieldName = field === 'name' ? `name_${formIndex}` : `${field}_${formIndex}`;
    
    if (field === 'drink') {
      // –î–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é radio –∫–Ω–æ–ø–∫—É
      const selectedDrink = form.querySelector(`input[name="${fieldName}"]:checked`);
      const value = selectedDrink ? selectedDrink.value : '';
      formDataForTelegram.append(fieldName, value);
    } else {
      const input = form.querySelector(`[name="${fieldName}"]`);
      const value = input ? (input.type === 'radio' ? (input.checked ? input.value : '') : input.value) : '';
      formDataForTelegram.append(fieldName, value);
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  const telegramMessage = TelegramService.formatRSVPMessage(formDataForTelegram);
  await retryAsync(() => TelegramService.sendMessage(telegramMessage), 10, 1000);
  
  return true;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function validateForm(form) {
  const errors = [];
  const formIndex = form.getAttribute('data-form-index');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  const nameField = form.querySelector(`[name="name_${formIndex}"]`);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –æ—à–∏–±–æ–∫
  form.querySelectorAll('.form-group').forEach(group => {
    group.classList.remove('error');
  });
  
  if (!nameField.value.trim()) {
    errors.push('–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è');
    nameField.closest('.form-group').classList.add('error');
  }
  
  return errors;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º
async function submitAllForms() {
  const formsContainer = document.getElementById('forms-container');
  const forms = formsContainer.querySelectorAll('.guest-form-single');
  const submitBtn = document.querySelector('.submit-all-btn');
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
  const allErrors = [];
  forms.forEach((form, index) => {
    const errors = validateForm(form);
    if (errors.length > 0) {
      allErrors.push(`–§–æ—Ä–º–∞ ${index + 1}: ${errors.join(', ')}`);
    }
  });
  
  if (allErrors.length > 0) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏:\n' + allErrors.join('\n'));
    return;
  }
  
  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
  submitBtn.disabled = true;
  submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ä–º—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for (let i = 0; i < forms.length; i++) {
      await submitSingleForm(forms[i]);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const thanksElement = document.getElementById('thanks');
    thanksElement.textContent = '–°–ø–∞—Å–∏–±–æ! –í—Å–µ –∞–Ω–∫–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram.';
    thanksElement.style.display = '';

    // –î–µ–ª–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è/disabled
    forms.forEach(form => {
      form.querySelectorAll('input, textarea').forEach(el => {
        if (el.type === 'radio' || el.type === 'checkbox') {
          el.disabled = true;
        } else {
          el.readOnly = true;
        }
      });
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π
    document.querySelectorAll('.add-guest-btn').forEach(btn => {
      btn.style.display = 'none';
    });

    setTimeout(() => {
      thanksElement.style.display = 'none';
    }, 5000);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    alert(error.message || '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    submitBtn.disabled = false;
    updateSubmitButtonText(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ä–º
function handleFormSubmission() {
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('submit-all-btn')) {
      e.preventDefault();
      submitAllForms();
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–Ω–µ —Å–º–æ–≥—É"
function handleWillNotAttend() {
  document.addEventListener('change', function(e) {
    if (e.target.name && e.target.name.startsWith('willAttend_') && e.target.value === '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É') {
      const form = e.target.closest('form');
      
      // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ –∏–º–µ–Ω–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
      const fieldsToHide = form.querySelectorAll('.form-group:not(:has(input[name*="name"])):not(:has(input[name*="willAttend"]))');
      fieldsToHide.forEach(field => {
        field.style.display = 'none';
        // –û—á–∏—â–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
        const inputs = field.querySelectorAll('input, textarea');
        inputs.forEach(input => {
          if (input.type === 'radio') {
            input.checked = false;
          } else {
            input.value = '';
          }
        });
      });
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è"
      const addGuestBtn = form.querySelector('.add-guest-btn');
      if (addGuestBtn) {
        addGuestBtn.style.display = 'none';
      }
    } else if (e.target.name && e.target.name.startsWith('willAttend_') && e.target.value === '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É!') {
      const form = e.target.closest('form');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ
      const fieldsToShow = form.querySelectorAll('.form-group');
      fieldsToShow.forEach(field => {
        field.style.display = 'block';
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è" —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º–µ
      const formIndex = form.getAttribute('data-form-index');
      if (formIndex === '0') {
        const addGuestBtn = form.querySelector('.add-guest-btn');
        if (addGuestBtn) {
          addGuestBtn.style.display = 'block';
        }
      }
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  handleImageLoad();
  adjustFontSize();
  handleChildrenFields();
  handleAddGuest();
  handleFormSubmission();
  handleWillNotAttend();
  updateSubmitButtonText(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  
  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  window.addEventListener('resize', adjustFontSize);
});
